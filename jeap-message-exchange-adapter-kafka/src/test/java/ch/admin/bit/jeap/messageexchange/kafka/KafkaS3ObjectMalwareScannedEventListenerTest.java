package ch.admin.bit.jeap.messageexchange.kafka;

import ch.admin.bit.jeap.domainevent.avro.AvroDomainEventIdentity;
import ch.admin.bit.jeap.domainevent.avro.AvroDomainEventPublisher;
import ch.admin.bit.jeap.domainevent.avro.AvroDomainEventType;
import ch.admin.bit.jeap.messageexchange.domain.MessageExchangeService;
import ch.admin.bit.jeap.messageexchange.domain.malwarescan.S3ObjectMalwareScanResultInfo;
import ch.admin.bit.jeap.messageexchange.domain.malwarescan.ScanResult;
import ch.admin.bit.jeap.s3.malware.scanned.S3ObjectMalwareScanResult;
import ch.admin.bit.jeap.s3.malware.scanned.S3ObjectMalwareScannedEvent;
import ch.admin.bit.jeap.s3.malware.scanned.S3ObjectMalwareScannedPayload;
import ch.admin.bit.jeap.s3.malware.scanned.S3ObjectMalwareScannedReferences;
import ch.admin.bit.jeap.s3.malware.scanned.S3ObjectReference;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.kafka.support.Acknowledgment;

import java.time.Instant;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
class KafkaS3ObjectMalwareScannedEventListenerTest {

    @Mock
    private MessageExchangeService messageExchangeService;

    @Mock
    private TopicConfiguration topicConfiguration;

    @Mock
    private Acknowledgment acknowledgment;

    private KafkaS3ObjectMalwareScannedEventListener eventListener;

    @BeforeEach
    void setUp() {
        eventListener = new KafkaS3ObjectMalwareScannedEventListener(messageExchangeService, topicConfiguration);
    }

    @Test
    void consume() {
        UUID objectKey = UUID.randomUUID();
        String bucketName = "test-bucket-partner";
        final S3ObjectMalwareScannedEvent event = createS3ObjectMalwareScannedEvent(objectKey, bucketName, S3ObjectMalwareScanResult.NO_THREATS_FOUND);

        eventListener.consume(event, acknowledgment);

        S3ObjectMalwareScanResultInfo expected = new S3ObjectMalwareScanResultInfo(ScanResult.NO_THREATS_FOUND, bucketName, objectKey.toString());

        verify(messageExchangeService, times(1)).onMalwareScanResult(expected);
        verify(acknowledgment, times(1)).acknowledge();
    }

    @Test
    void init_doNotFail_whenMalwareScanResultTopicSet() {
        when(topicConfiguration.getMalwareScanResult()).thenReturn("test-topic");

        eventListener.init();

        verify(topicConfiguration, times(2)).getMalwareScanResult();
    }

    @Test
    void init_doFail_whenMalwareScanResultTopicNotSet() {
        when(topicConfiguration.getMalwareScanResult()).thenReturn(null);
        assertThrows(IllegalStateException.class, () -> eventListener.init());
        verify(topicConfiguration, times(1)).getMalwareScanResult();
    }


    private static S3ObjectMalwareScannedEvent createS3ObjectMalwareScannedEvent(UUID objectKey, String bucketName, S3ObjectMalwareScanResult malwareScanResult) {
        return S3ObjectMalwareScannedEvent.newBuilder()
                .setIdentity(AvroDomainEventIdentity.newBuilder()
                        .setIdempotenceId(objectKey.toString())
                        .setEventId(UUID.randomUUID().toString())
                        .setCreated(Instant.now())
                        .build())
                .setType(AvroDomainEventType.newBuilder()
                        .setName("S3ObjectMalwareScannedEvent")
                        .setVersion("1.0.0")
                        .build())
                .setPublisher(AvroDomainEventPublisher.newBuilder()
                        .setService("my-service")
                        .setSystem("my-system")
                        .build())
                .setPayload(S3ObjectMalwareScannedPayload.newBuilder()
                        .setScanResult(malwareScanResult)
                        .build())
                .setReferences(S3ObjectMalwareScannedReferences.newBuilder()
                        .setS3ObjectReference(S3ObjectReference.newBuilder()
                                .setBucketName(bucketName)
                                .setObjectKey(objectKey.toString())
                                .build())
                        .build())
                .setDomainEventVersion("1.0.0")
                .build();
    }
}