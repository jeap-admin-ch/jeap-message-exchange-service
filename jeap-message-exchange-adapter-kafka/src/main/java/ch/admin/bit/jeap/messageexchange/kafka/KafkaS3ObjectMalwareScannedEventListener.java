package ch.admin.bit.jeap.messageexchange.kafka;

import ch.admin.bit.jeap.messageexchange.domain.MessageExchangeService;
import ch.admin.bit.jeap.messageexchange.domain.malwarescan.S3ObjectMalwareScanResultInfo;
import ch.admin.bit.jeap.messageexchange.domain.malwarescan.ScanResult;
import ch.admin.bit.jeap.s3.malware.scanned.S3ObjectMalwareScanResult;
import ch.admin.bit.jeap.s3.malware.scanned.S3ObjectMalwareScannedEvent;
import ch.admin.bit.jeap.s3.malware.scanned.S3ObjectMalwareScannedPayload;
import ch.admin.bit.jeap.s3.malware.scanned.S3ObjectMalwareScannedReferences;
import ch.admin.bit.jeap.s3.malware.scanned.S3ObjectReference;
import jakarta.annotation.PostConstruct;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.kafka.support.Acknowledgment;
import org.springframework.stereotype.Component;

@Slf4j
@RequiredArgsConstructor
@Component
@ConditionalOnProperty(value = "jeap.messageexchange.malwarescan.enabled", havingValue = "true")
public class KafkaS3ObjectMalwareScannedEventListener {

    private final MessageExchangeService messageExchangeService;
    private final TopicConfiguration topicConfiguration;

    @PostConstruct
    void init() {
        if (topicConfiguration.getMalwareScanResult() == null) {
            throw new IllegalStateException("Topic for malware scan result is not configured");
        }
        log.info("KafkaS3ObjectMalwareScannedEventListener started for topic {}", topicConfiguration.getMalwareScanResult());
    }

    @KafkaListener(topics = {"${jeap.messageexchange.kafka.topic.malware-scan-result}"}, id = "KafkaS3ObjectMalwareScannedEventListener")
    public void consume(final S3ObjectMalwareScannedEvent event, Acknowledgment acknowledgment) {
        S3ObjectMalwareScanResultInfo malwareScanResultInfo = mapToInternalS3ObjectMalwareScanResult(event);
        messageExchangeService.onMalwareScanResult(malwareScanResultInfo);

        acknowledgment.acknowledge();
    }

    private S3ObjectMalwareScanResultInfo mapToInternalS3ObjectMalwareScanResult(S3ObjectMalwareScannedEvent event) {
        S3ObjectReference reference = extractS3ObjectReference(event);
        S3ObjectMalwareScanResult scanResult = extractScanResult(event);

        ScanResult internalScanResult = ScanResult.valueOf(scanResult.name());

        return new S3ObjectMalwareScanResultInfo(
                internalScanResult,
                reference.getBucketName(),
                reference.getObjectKey()
        );
    }

    private S3ObjectReference extractS3ObjectReference(S3ObjectMalwareScannedEvent event) {
        S3ObjectMalwareScannedReferences referencess = event.getReferences();
        return referencess.getS3ObjectReference();
    }

    private S3ObjectMalwareScanResult extractScanResult(S3ObjectMalwareScannedEvent event) {
        S3ObjectMalwareScannedPayload payload = event.getPayload();
        return payload.getScanResult();
    }
}